<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.mc.blog.user.repository.mappers.user">


<!-- 로그인 정보 -->
<select id="do_viewMember" parameterType="project.mc.blog.user.domain.UserVO" resultType="project.mc.blog.user.domain.UserVO">
select
USER_ID, 
USER_PASSWORD,
USER_NAME,
AGE,
EMAIL,
ADDRESS,
PHONE
from mc_user
where USER_ID = #{user_id}
</select>

<!-- 회원  탈퇴 -->
<delete id="do_delete" parameterType="project.mc.blog.user.domain.UserVO" >
update mc_user
set WITHDRAW_FLAG = #{withdraw_flag}
where user_id = #{user_id}
</delete>

<!--  회원 수정   -->
<update id="do_update" parameterType="project.mc.blog.user.domain.UserVO">
UPDATE MC_USER
SET 
USER_PASSWORD = #{user_password},
USER_NAME     = #{user_name},
AGE           = #{age},
EMAIL         = #{email},
ADDRESS       = #{address},
PHONE         = #{phone}
WHERE USER_ID     = #{user_id}
</update>

<!-- 로그인 아이디 체크  -->
<select id="do_loginCheck" parameterType="project.mc.blog.user.domain.UserVO" resultType="String">
SELECT USER_NAME
 FROM MC_USER
 WHERE USER_ID = #{user_id}
 AND USER_PASSWORD = #{user_password}
</select>

<!-- 중복 아이디 체크  -->
<select id="do_idCheck" parameterType="project.mc.blog.user.domain.UserVO">
SELECT COUNT(USER_ID) AS CNT
  FROM MC_USER
 WHERE USER_ID = #{user_id}
</select>

<!-- 회원가입   -->
<insert id="do_save" parameterType="project.mc.blog.user.domain.UserVO" >
INSERT
INTO MC_USER
  (
    USER_NO,
    USER_ID,
    USER_PASSWORD,
    USER_DIV,
    USER_NAME,
    GENDER,
    AGE,
    EMAIL,
    ADDRESS,
    PHONE,
    WITHDRAW_FLAG
  )
  VALUES
  (
    SEQ_USER_NO.NEXTVAL,
    #{user_id},
    #{user_password},
    #{user_div},
    #{user_name},
    #{gender},
    #{age},
    #{email},
    #{address},
    #{phone},
    1
  )
</insert>	
    <!-- <select id="do_searchOne" 
      parameterType="com.sist.user.domain.UserVO"
      resultType="com.sist.user.domain.UserVO">
        SELECT ID,    
			  NAME,       
			  PASSWORD,   
			  U_LEVEL,
			  U_LEVEL as levelIntValue,      
			  LOGIN,      
			  RECOMMEND,  
			  MAIL,       
			  REG_DT,     
			  1 no,       
			  1 total_cnt 
		FROM USERS   
		where id = #{id}  
    </select>   -->
	
	<!-- <update id="do_update" parameterType="com.sist.user.domain.UserVO"  >
		UPDATE USERS
		   SET NAME      = #{name, jdbcType=VARCHAR}
		      ,PASSWORD  = #{password, jdbcType=VARCHAR}
		      ,U_LEVEL   = #{u_level}
		      ,LOGIN     = #{login, jdbcType=VARCHAR}
		      ,RECOMMEND = #{recommend, jdbcType=VARCHAR}
		      ,MAIL      = #{mail, jdbcType=VARCHAR}
		      ,REG_DT    = sysdate
		 WHERE ID        = #{id, jdbcType=VARCHAR}
	</update> -->
	
	
	<!-- <delete id="do_delete"  
	parameterType="UserVO">
	   DELETE FROM USERS
        WHERE ID = #{id}   
	</delete> -->
	
	<!-- <update id="do_save"  
	   parameterType="com.sist.user.domain.UserVO">
	   INSERT INTO USERS(ID,NAME,PASSWORD,U_LEVEL,LOGIN,RECOMMEND,MAIL,REG_DT) 
             VALUES (#{id},#{name},#{password},#{u_level},#{login},#{recommend},#{mail},SYSDATE)
    </update>     --> 
    
    <!-- <sql id="BaseConditionForFilter">    
       <where>   
        <choose>
            <when test="SEARCH_DIV == '10'">
                 A.ID LIKE  #{SEARCH_WORD} || '%'         
            </when>
            <when test="SEARCH_DIV == '20'">
                AND A.name LIKE  #{SEARCH_WORD} || '%'     
            </when>
            <when test="SEARCH_DIV == '30'">
                AND A.u_Level LIKE   #{SEARCH_WORD} || '%'     
            </when>
                        
            <otherwise></otherwise>
        </choose>
        </where>       
    </sql> -->
        
	<!-- <select id="do_search" 
	      parameterType="String"
	      resultType="com.sist.user.domain.UserVO">
	     
		 select T1.id                                                
		       ,T1.name                                              
		       ,T1.password                                          
		       ,T1.u_Level                                           
		       ,T1.login                                             
		       ,T1.recommend                                         
		       ,T1.mail                                              
		       ,TO_CHAR(T1.reg_dt,'YYYY-MM-DD') AS reg_dt            
		       ,T1.total_cnt  as totalNo                                       
		       ,T1.RNUM as no                                        
		   from(                                                     
		   select A.*                                                
		          ,ROW_NUMBER() OVER(ORDER BY A.reg_dt DESC) as RNUM 
		          ,COUNT(*) OVER () AS TOTAL_CNT                     
		     from USERS A
		    <include refid="BaseConditionForFilter" />
       <![CDATA[     
		 order by reg_dt desc                            
		   )T1                                              
		WHERE RNUM BETWEEN (#{PAGE_SIZE} * (#{PAGE_NUM}-1)+1) AND (#{PAGE_SIZE} * (#{PAGE_NUM}-1)+#{PAGE_SIZE})    
		]]>   
	</select>    -->   
</mapper>